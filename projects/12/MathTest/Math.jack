// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array twoToThe; // static0
    static Array static1;

    /** Initializes the library. */
    function void init() {
        var int i;

        let static1 = Array.new(16);
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        while (i < 15) {
            let i = i + 1;
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum, temp, l2, j, sign;

        let sign = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (x < y) {
            let temp = x;
            let x = y;
            let y = temp;
        }
        while ((l2 - 1) < (y - 1)) {
            if (~((twoToThe[j] & y) = 0)) {
                let sum = sum + x;
                let l2 = l2 + twoToThe[j];
            }
            let x = x + x;
            let j = j + 1;
        }
        if (sign) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int l0, result, sign, l3;

        if (y = 0) {
            do Sys.error(3);
        }
        let sign = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
        let static1[0] = Math.abs(y);
        let x = Math.abs(x);
        while ((l0 < 15) & (~l3)) {
            let l3 = (32767 - (static1[l0] - 1)) < ((static1[l0] - 1));
            if (~l3) {
                let static1[l0 + 1] = static1[l0] + static1[l0];
                let l3 = (static1[l0 + 1] - 1) > (x - 1);
                if (~l3) {
                    let l0 = l0 + 1;
                }
            }
        }
        while (l0 > -1) {
            if (~((static1[l0] - 1) > (x - 1))) {
                let result = result + twoToThe[l0];
                let x = x - static1[l0];
            }
            let l0 = l0 - 1;
        }
        if (sign) {
            let result = -result;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int l0, l1, l2, l3;
    
        if (x < 0) {
            do Sys.error(4);
        }
        let l0 = 7;
        while (l0 > -1) {
            let l1 = l3 + twoToThe[l0];
            let l2 = l1 * l1;
            if ((~(l2 > x)) & (~(l2 < 0))) {
                let l3 = l1;
            }
            let l0 = l0 - 1;
        }
        return l3;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            let b = a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            let b = a;
        }
        return b;
    }
}
